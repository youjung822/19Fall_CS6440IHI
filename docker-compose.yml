# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)

version: '3.7'

# Define services
services:
  # App backend service
  app-server:
    # Configuration for building the docker image for the backend service
    build:
      context: food-planner-back-end # Use an image built from the specified dockerfile in the `polling-app-server` directory.
      dockerfile: Dockerfile
    ports:
      - "8080:80" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on:
      - db # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service
      ENV: local
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend

  # Frontend Service
  app-client:
    build:
      context: food-planner-front-end # Use an image built from the specified dockerfile in the `polling-app-client` directory.
      dockerfile: Dockerfile
#      args:
#        REACT_APP_API_BASE_URL: http://127.0.0.1:3000/api
    ports:
      - "3000:80" # Map the exposed port 80 on the container to port 9090 on the host machine
    restart: always
    depends_on:
      - app-server
    networks:
      - backend
      - frontend

  # Database Service (Mysql)
#  db:
#    image: mysql:5.7
#    ports:
#      - "3306:3306"
#    restart: always
#    environment:
#      MYSQL_DATABASE: polls
#      MYSQL_USER: callicoder
#      MYSQL_PASSWORD: callicoder
#      MYSQL_ROOT_PASSWORD: root
#    volumes:
  db:
    build:
      context: food-planner-database
      dockerfile: Dockerfile
    restart: always
    ports:
      - "5432:5432"
    environment:
      SPRING_DATASOURCE_URL: "localhost:5432/foodplanner2database"
      SPRING_DATASOURCE_USERNAME: "test"
      SPRING_DATASOURCE_PASSWORD: "test"
    networks:
      - backend
      - frontend

# Volumes
#volumes:
#  db-data:

# Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend: